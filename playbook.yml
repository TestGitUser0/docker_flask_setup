---
- name: Full Docker-based Flask App Deployment on AlmaLinux
  hosts: SecondVM
  become: yes

  vars:
    app_dir: /opt/flaskapp
    image_name: flaskapp:latest
    container_name: flask-container

  tasks:
    - name: Install required tools
      dnf:
        name:
          - yum-utils
          - device-mapper-persistent-data
          - lvm2
        state: present

    - name: Add Docker repository
      get_url:
        url: https://download.docker.com/linux/centos/docker-ce.repo
        dest: /etc/yum.repos.d/docker-ce.repo

    - name: Install Docker engine
      dnf:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
        state: latest

    - name: Enable and start Docker service
      systemd:
        name: docker
        enabled: true
        state: started

    - name: Ensure docker group exists
      group:
        name: docker
        state: present

    - name: Add remote user to docker group
      user:
        name: "{{ ansible_user }}"
        groups: docker
        append: yes
      ignore_errors: true  # Jenkinsからroot以外でSSHするなら

    - name: Create application directory
      file:
        path: "{{ app_dir }}"
        state: directory

    - name: Copy Flask app files
      copy:
        src: "{{ playbook_dir }}/flask"
        dest: "{{ app_dir }}/"
        mode: '0755'

    - name: Copy requirements.txt
      copy:
        src: "{{ playbook_dir }}/requirements.txt"
        dest: "{{ app_dir }}/requirements.txt"

    - name: Copy Dockerfile
      copy:
        src: "{{ playbook_dir }}/Dockerfile"
        dest: "{{ app_dir }}/Dockerfile"

    - name: Build Docker image
      community.docker.docker_image:
        name: "{{ image_name }}"
        source: build
        build:
          path: "{{ app_dir }}"

    - name: Stop and remove existing container
      community.docker.docker_container:
        name: "{{ container_name }}"
        state: absent
      ignore_errors: yes

    - name: Run new Flask container
      community.docker.docker_container:
        name: "{{ container_name }}"
        image: "{{ image_name }}"
        state: started
        restart_policy: always
        ports:
          - "80:5000"


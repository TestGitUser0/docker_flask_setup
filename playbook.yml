- name: Install Docker and deploy Flask app on AlmaLinux 9
  hosts: SecondVM
  become: yes

  vars:
    app_root: /srv/flaskapp

  pre_tasks:
    - name: Remove podman-docker if installed
      ansible.builtin.dnf:
        name: podman-docker
        state: absent

    - name: Install dnf-plugins-core (for repository management)
      ansible.builtin.dnf:
        name: dnf-plugins-core
        state: present

    - name: Add Docker CE repository (for AlmaLinux 9)
      ansible.builtin.yum_repository:
        name: docker-ce
        description: Docker CE Stable Repository
        baseurl: https://download.docker.com/linux/centos/9/x86_64/stable/
        gpgcheck: yes
        gpgkey: https://download.docker.com/linux/centos/gpg
        enabled: yes

    - name: Install required system packages
      ansible.builtin.dnf:
        name:
          - python3
          - python3-pip
          - git
          - docker-ce
          - docker-ce-cli
          - containerd.io
        state: present
        allowerasing: true

  tasks:
    - name: Enable and start docker service
      ansible.builtin.systemd:
        name: docker
        enabled: true
        state: started

    - name: Add current user to docker group (optional)
      ansible.builtin.user:
        name: "{{ ansible_user }}"
        groups: docker
        append: yes
      when: ansible_user != "root"

    - name: Restart docker after group change (optional)
      ansible.builtin.systemd:
        name: docker
        state: restarted
      when: ansible_user != "root"

    # ここからアプリ関連
    - name: Create application directory
      ansible.builtin.file:
        path: "{{ app_root }}/myapp"
        state: directory
        owner: root
        group: root
        mode: '0755'

    - name: Create __init__.py inside myapp
      ansible.builtin.copy:
        dest: "{{ app_root }}/myapp/__init__.py"
        content: ""
        owner: root
        group: root
        mode: '0644'

    - name: Copy application files
      ansible.builtin.copy:
        src: "{{ item.src }}"
        dest: "{{ app_root }}/{{ item.dest }}"
        owner: root
        group: root
        mode: '0644'
      loop:
        - { src: 'Dockerfile', dest: 'Dockerfile' }
        - { src: 'requirements.txt', dest: 'requirements.txt' }
        - { src: 'flask/app/app.py', dest: 'myapp/app.py' }

    - name: Build Docker image
      community.docker.docker_image:
        name: flaskapp
        source: build
        build:
          path: "{{ app_root }}"
        tag: latest

    - name: Run Docker container
      community.docker.docker_container:
        name: flaskapp
        image: flaskapp:latest
        state: started
        restart_policy: always
        ports:
          - "8080:8080"

